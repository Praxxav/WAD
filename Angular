2c. Create an Angular application which will do following actions: Register User, Login User, Show User Data on Profile Component 
What is Angular and why is it used?
Angular is a TypeScript-based open-source web application framework developed and maintained by Google. It is used to build dynamic, single-page web applications (SPAs) with rich user interfaces, complex functionalities, and clear separation of concerns. Angular provides features like data binding, component-based architecture, dependency injection, routing, forms handling, and more, making it suitable for developing modern web applications.
What is the difference between Node.js and Angular, and when would you use each?
Answer: Node.js is a server-side JavaScript runtime environment, whereas Angular is a front-end framework for building client-side applications. Node.js is used for server-side development, such as building APIs, handling database operations, and server-side logic. Angular, on the other hand, is used for client-side development, including building user interfaces, handling user interactions, and managing application state. Use Node.js when developing server-side applications or APIs, and use Angular when building client-side web applications with rich user interfaces and interactive components.
What are the key features of Angular that make it suitable for building web applications?
Answer: Angular offers features like two-way data binding, dependency injection, modular architecture, templates, and powerful CLI tools. It promotes code reusability, maintainability, and scalability in web development projects.
Explain the role of services in Angular applications.
Answer: Services in Angular are used for reusable business logic, data sharing between components, and making HTTP requests to external APIs. They promote code separation, modularity, and maintainability by keeping the business logic separate from the components.
Question: How does Angular handle HTTP requests, and what are observables?
Answer: Angular's HttpClient module is used to send HTTP requests to a server and receive responses. It returns observables, which are a powerful feature in RxJS that represent a stream of asynchronous data. Observables can be transformed, combined, and subscribed to handle asynchronous operations elegantly.
Can you elaborate on the components involved?
RegisterComponent: Handles the registration form, collects user data, and interacts with the user service for registration logic (potentially calling an API). LoginComponent: Handles the login form, validates user credentials, and interacts with the authentication service for login logic (potentially calling an API or using stored tokens). ProfileComponent: Retrieves and displays user data based on the logged-in user information.

Code :
1.	npm --version
2.	npm install -g @angular/cli@latest
3.	ng new partc
4.	Click on partc-> src->app.component.html
5.	remove all contents inside file
<h1> {{title}} </h1>
<input type="text" #name placeholder="Enter your name:"  name="Name"><br>
<input type="text" #address placeholder="Enter your Address:"  name="Address"><br>
<input type="text" #contact placeholder="Enter your Contact number:"  name="Contact"><br>
<input type="email" #email placeholder="Enter your EmailID:"  name="Email"><br>
<input type="password" #password placeholder="Enter your passwrod:"  name="Password"><br>

<button (click) ="getValue(name.value,address.value,contact.value,email.value)"
Register</button>
6.	Open app.component.ts
export class AppComponent {
  title = 'Registration Form';displayname='';

displayaddress='';
displaycontact='';
displayemail='';

getValue(name:string,address:string,contact:string,email:string)
  {
    this.displayname=name;
    this.displayaddress=address;
    this.displaycontact=contact;
    this.displayemail=email;
   }
}
7.	Open app.component.html
<h1>
  Your Registered Data :
</h1>
 
