// 3b) Create four API using Node.JS, ExpressJS and MongoDB for CURD Operations on assignment 2.C. 
// What is MongoDB?
// MongoDB is a NoSQL database management system that stores data in a flexible, JSON-like format called BSON. It is designed for scalability, high performance, and ease of development, making it suitable for handling large volumes of data and complex applications.
// Why do we use Postman?
// Postman is a popular API development tool used for testing, documenting, and debugging APIs. It allows developers to send HTTP requests to APIs and receive responses, making it easy to test various endpoints, parameters, and authentication methods without writing code manually. Postman also provides features for organizing and sharing API collections, making it a valuable tool for API development and testing.
// What is an API (Application Programming Interface)? Why do we need it?
// An API (Application Programming Interface) is a set of definitions and protocols that enable communication between different software components or applications. APIs provide a way for applications to request and receive data or services from each other in a structured and well-defined manner.We need APIs to enable seamless integration between different systems, services, and platforms, facilitating data sharing, automation, and building scalable applications.
// PUT, POST, Update, Delete, Get methods
// These are HTTP methods used for different operations in RESTful APIs:
// GET: Used to retrieve data from a server.
// POST: Used to send data to a server to create a new resource.
// PUT: Used to update or replace an existing resource on the server.
// PATCH: Used to partially update an existing resource on the server.
// DELETE: Used to delete a resource from the server.
// What is the purpose of Node.js in building APIs for CRUD operations?
// Answer: Node.js is a runtime environment that allows developers to use JavaScript for server-side programming. When building APIs for CRUD (Create, Read, Update, Delete) operations, Node.js provides a non-blocking and event-driven architecture, making it efficient for handling multiple concurrent requests. It also has a vast ecosystem of libraries and frameworks like Express.js, which simplify the development of RESTful APIs.
// Why use Express.js for building APIs in Node.js?
// Answer: Express.js is a minimalist and flexible Node.js web application framework that provides a robust set of features for building APIs. It simplifies routing, middleware integration, request handling, and response generation, making API development more structured and organized. Express.js also supports various HTTP methods like GET, POST, PUT, DELETE, which are essential for implementing CRUD operations.
// What role does MongoDB play in building APIs for CRUD operations?
// Answer: MongoDB is a NoSQL database that stores data in flexible, JSON-like documents. When building APIs for CRUD operations, MongoDB serves as the data storage and retrieval layer. It allows developers to store and manipulate data in a schema-less format, making it suitable for handling dynamic and unstructured data. MongoDB's flexibility and scalability are beneficial for applications requiring fast data access and frequent updates.
// What is the purpose of using body-parser middleware in this application?
// Answer: body-parser parses incoming request bodies (usually JSON data) sent in POST, PUT, and PATCH requests, allowing us to access data sent from the client in our Node.js application.
// How do you establish a connection with MongoDB in a Node.js application?
// Answer: In a Node.js application, we establish a connection with MongoDB using the Mongoose library. We use Mongoose to define schemas, models, and interact with the MongoDB database through asynchronous operations.
// What are the advantages of using asynchronous operations in Node.js for API development?
// Answer: Asynchronous operations in Node.js allow for non-blocking I/O, which means multiple operations can be executed concurrently without waiting for each operation to complete. This improves the performance and scalability of APIs, as it can handle multiple requests simultaneously without blocking the event loop.

// •	Node.js: JavaScript runtime environment that allows us to build server-side applications.
// •	Express.js: Web framework built on top of Node.js for creating APIs and handling HTTP requests.
// •	MongoDB: NoSQL document database that stores data in flexible JSON-like documents

// 'npm' stands for Node Package Manager. It is a command-line utility that comes bundled with Node.js, allowing developers to manage packages and dependencies for Node.js projects.


Steps:
1.	Open Folder in VS Code
2.	npm init
3.	create index.js
4.	open mongodb compass -> new connection -> show dbs ->use student -> 
db.createCollection('profile') 
db.profile.insertOne({name:"Avnish", email:"ash@gmail", city:"Pune"})
5.	Open VS code t erminal ->terminal
npm i mongodb
npm i express
6.	Inside mongodb.js
const {MongoClient}=require('mongodb');
const url="mongodb://localhost:27017"
const database = 'student';
const client = new MongoClient(url, {useNewUrlParser:true});

const dbConnect=async()=>{
  const result=await client.connect();
  const db = result.db(database);
  return db.collection('profile');
}
module.exports=dbConnect;
7.	Inside index.js
const dbConnect=require('./mongodb')
const express=require('express');
const app = express();
app.use(express.json())

//get API
app.get('/',async(req,res)=>{
    let result =await dbConnect();
    result =await result.find().toArray();
    res.send(result);
})
app.listen(3000);
8.	Execute in terminal
node index.js
9.	Open Postman -> put localhost:3000/ 
Get and Enter
10.	Inside index.js (Add post API)
app.post('/',async(req,res)=>{
    let result=await dbConnect();
    result=await result.insertOne(req.body);
    res.send("data Inserted successfully")
})
11.	Open Postman -> change to POST method 
12.	click on body -> raw -> JSON
{
	"name":"Ash",
	"email":"ash@gmail.com",
	"city":"Pune"
}
13.	//PUT API
14.	app.put('/',async(req,res)=>{
    let result=await dbConnect();
    result=await result.updateOne({name:"Avnish"},{$set:{city:"Mumbai"}});
    res.send("data Updated successfully")
})
OR
app.put('/:name',async(req,res)=>{
    let result=await dbConnect();
    result=await result.updateOne({name:req.params.name},{$set:req.body});
    res.send("data Updated successfully")
})

On Postman in the link, give name ahead(select PUT)
Ex : localhost:3000/Avnish
15.	//Delete API
app.delete('/:name',async(req,res)=>{
    let result=await dbConnect();
    result=await result.deleteOne({name:req.params.name});
    res.send("data Deleted successfully")
})
On Postman in the link, give name ahead(select DELETE)
Ex : localhost:3000/Ash
16.	Now We can change name of all if we want
//get API
app.get('/getData',async(req,res)=>{
    let result =await dbConnect();
    result =await result.find().toArray();
    res.send(result);
})
app.post('/insertData',async(req,res)=>{
    let result=await dbConnect();
    result=await result.insertOne(req.body);
    res.send("data Inserted successfully")
})
app.put('/updateData:name',async(req,res)=>{
    let result=await dbConnect();
    result=await result.updateOne({name:req.params.name},{$set:req.body});
    res.send("data Updated successfully")
})
app.delete('/deleteData:name',async(req,res)=>{
    let result=await dbConnect();
    result=await result.deleteOne({name:req.params.name});
    res.send("data Deleted successfully")
})

Run node index.js
localhost:3000/getData 
localhost:3000/insertData -> body -> raw -> JSON 
localhost:3000/updateData/Avnish
 -> body -> raw -> JSON
localhost:3000/deleteData/Ash



